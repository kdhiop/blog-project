package com.example.blog.controller;

import com.example.blog.dto.AuthRequest;
import com.example.blog.dto.AuthResponse;
import com.example.blog.model.User;
import com.example.blog.service.UserService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/auth")
@CrossOrigin(origins = "http://localhost:5173")
public class AuthController {

    private final UserService userService;
    public AuthController(UserService userService) { this.userService = userService; }

    @PostMapping("/register")
    public ResponseEntity<AuthResponse> register(@RequestBody AuthRequest req) {
        try {
            User u = userService.register(req.getUsername(), req.getPassword());
            return ResponseEntity.ok(new AuthResponse(u.getId(), u.getUsername()));
        } catch (IllegalArgumentException ex) {
            return ResponseEntity.badRequest().build();
        }
    }

    @PostMapping("/login")
    public ResponseEntity<String> login(@RequestBody AuthRequest req) {
        boolean ok = userService.authenticate(req.getUsername(), req.getPassword());
        if (ok) return ResponseEntity.ok("로그인 성공");
        return ResponseEntity.status(401).body("로그인 실패");
    }

    // 프론트가 로그인 성공 후 userId 를 얻기 위해 사용
    @GetMapping("/user")
    public ResponseEntity<AuthResponse> findUser(@RequestParam String username) {
        User u = userService.findByUsername(username);
        if (u == null) return ResponseEntity.notFound().build();
        return ResponseEntity.ok(new AuthResponse(u.getId(), u.getUsername()));
    }
    
    @DeleteMapping("/comments/{id}")
    public ResponseEntity<Void> deleteComment(@PathVariable Long id) {
        commentService.deleteComment(id);
        return ResponseEntity.noContent().build();
    }
}
