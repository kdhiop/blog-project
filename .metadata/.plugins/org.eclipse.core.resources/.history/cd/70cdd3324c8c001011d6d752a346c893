package com.example.blog.controller;

import com.example.blog.dto.CommentRequest;
import com.example.blog.dto.CommentResponse;
import com.example.blog.model.Comment;
import com.example.blog.service.CommentService;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/posts/{postId}/comments")
@CrossOrigin(origins = "http://localhost:5173")
public class CommentController {

    private final CommentService commentService;
    public CommentController(CommentService commentService) { this.commentService = commentService; }

    @GetMapping
    public List<CommentResponse> list(@PathVariable Long postId) {
        return commentService.listByPost(postId).stream().map(this::toResp).collect(Collectors.toList());
    }

    @PostMapping
    public CommentResponse add(@PathVariable Long postId, @RequestParam Long userId, @RequestBody CommentRequest req) {
        Comment c = commentService.add(postId, userId, req.getContent());
        return toResp(c);
    }

    private CommentResponse toResp(Comment c) {
        CommentResponse r = new CommentResponse();
        r.setId(c.getId());
        r.setContent(c.getContent());
        if (c.getAuthor() != null) {
            r.setAuthorId(c.getAuthor().getId());
            r.setAuthorUsername(c.getAuthor().getUsername());
        }
        return r;
    }
    
    @DeleteMapping("/comments/{id}")
    public ResponseEntity<Void> deleteComment(@PathVariable Long id) {
        commentService.deleteComment(id);
        return ResponseEntity.noContent().build();
    }

}
