package com.example.blog.service;

import com.example.blog.model.Post;
import com.example.blog.model.User;
import com.example.blog.repository.PostRepository;
import com.example.blog.repository.UserRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class PostService {
    private final PostRepository postRepository;
    private final UserRepository userRepository;

    public PostService(PostRepository postRepository, UserRepository userRepository) {
        this.postRepository = postRepository;
        this.userRepository = userRepository;
    }

    public List<Post> listAll() { return postRepository.findAll(); }

    public Post get(Long id) { return postRepository.findById(id).orElseThrow(); }

    public Post create(Long userId, String title, String content) {
        User author = userRepository.findById(userId).orElseThrow();
        Post p = new Post();
        p.setTitle(title);
        p.setContent(content);
        p.setAuthor(author);
        return postRepository.save(p);
    }

    public Post update(Long id, Long userId, String title, String content) {
        Post p = postRepository.findById(id).orElseThrow();
        if (p.getAuthor() == null || !p.getAuthor().getId().equals(userId)) {
            throw new SecurityException("not author");
        }
        p.setTitle(title);
        p.setContent(content);
        return postRepository.save(p);
    }

    public void delete(Long id, Long userId) {
        Post p = postRepository.findById(id).orElseThrow();
        if (p.getAuthor() == null || !p.getAuthor().getId().equals(userId)) {
            throw new SecurityException("not author");
        }
        postRepository.deleteById(id);
    }
    
    public List<Post> getPostsByUser(User user) {
        return postRepository.findByUser(user);
    }

}
